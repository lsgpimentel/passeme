/**
 * Core script to handle the entire layout and base functions
 */
var App = function() {

	// IE mode
	var isRTL = false;
	var isIE8 = false;
	var isIE9 = false;
	var isIE10 = false;

	var sidebarWidth = 225;
	var sidebarCollapsedWidth = 35;

	var responsiveHandlers = [];

	// theme layout color set
	var layoutColorCodes = {
		'blue' : '#4b8df8',
		'red' : '#e02222',
		'green' : '#35aa47',
		'purple' : '#852b99',
		'grey' : '#555555',
		'light-grey' : '#fafafa',
		'yellow' : '#ffb848'
	};

	var handleInit = function() {

		if ($('body').css('direction') === 'rtl') {
			isRTL = true;
		}

		isIE8 = !!navigator.userAgent.match(/MSIE 8.0/);
		isIE9 = !!navigator.userAgent.match(/MSIE 9.0/);
		isIE10 = !!navigator.userAgent.match(/MSIE 10.0/);

		if (isIE10) {
			jQuery('html').addClass('ie10'); // detect IE10 version
		}
	};

	var handleDesktopTabletContents = function() {
		// loops all page elements with "responsive" class and applies classes
		// for tablet mode
		// For Metronic 1280px or less set as tablet mode to display the content
		// properly
		if ($(window).width() <= 1280 || $('body').hasClass('page-boxed')) {
			$(".responsive").each(function() {
				var forTablet = $(this).attr('data-tablet');
				var forDesktop = $(this).attr('data-desktop');
				if (forTablet) {
					$(this).removeClass(forDesktop);
					$(this).addClass(forTablet);
				}
			});
		}

		// loops all page elements with "responsive" class and applied classes
		// for desktop mode
		// For Metronic higher 1280px set as desktop mode to display the content
		// properly
		if ($(window).width() > 1280
				&& $('body').hasClass('page-boxed') === false) {
			$(".responsive").each(function() {
				var forTablet = $(this).attr('data-tablet');
				var forDesktop = $(this).attr('data-desktop');
				if (forTablet) {
					$(this).removeClass(forTablet);
					$(this).addClass(forDesktop);
				}
			});
		}
	};

	var handleSidebarState = function() {
		// remove sidebar toggler if window width smaller than 900(for table and
		// phone mode)
		if ($(window).width() < 980) {
			$('body').removeClass("page-sidebar-closed");
		}
	};

	var runResponsiveHandlers = function() {
		// reinitialize other subscribed elements
		for ( var i in responsiveHandlers) {
			var each = responsiveHandlers[i];
			each.call();
		}
	};

	var handleResponsive = function() {
		handleTooltips();
		handleSidebarState();
		handleDesktopTabletContents();
		handleSidebarAndContentHeight();
		handleChoosenSelect();
		handleFixedSidebar();
		runResponsiveHandlers();
	};

	var handleResponsiveOnInit = function() {
		handleSidebarState();
		handleDesktopTabletContents();
		handleSidebarAndContentHeight();
	};

	var handleResponsiveOnResize = function() {
		var resize;
		if (isIE8) {
			var currheight;
			$(window).resize(function() {
				if (currheight == document.documentElement.clientHeight) {
					return; // quite event since only body resized not window.
				}
				if (resize) {
					clearTimeout(resize);
				}
				resize = setTimeout(function() {
					handleResponsive();
				}, 50); // wait 50ms until window resize finishes.
				currheight = document.documentElement.clientHeight; // store
				// last body
				// client
				// height
			});
		} else {
			$(window).resize(function() {
				if (resize) {
					clearTimeout(resize);
				}
				resize = setTimeout(function() {
					handleResponsive();
				}, 50); // wait 50ms until window resize finishes.
			});
		}
	};

	// * BEGIN:CORE HANDLERS *//
	// this function handles responsive layout on screen size resize or mobile
	// device rotate.

	var handleSidebarAndContentHeight = function() {
		var content = $('.page-content');
		var sidebar = $('.page-sidebar');
		var body = $('body');
		var height;

		if (body.hasClass("page-footer-fixed") === true
				&& body.hasClass("page-sidebar-fixed") === false) {
			var available_height = $(window).height() - $('.footer').height();
			if (content.height() < available_height) {
				content.attr('style', 'min-height:' + available_height
						+ 'px !important');
			}
		} else {
			if (body.hasClass('page-sidebar-fixed')) {
				height = _calculateFixedSidebarViewportHeight();
			} else {
				height = sidebar.height() + 20;
			}
			if (height >= content.height()) {
				content.attr('style', 'min-height:' + height + 'px !important');
			}
		}
	};

	var handleSidebarMenu = function() {
		jQuery('.page-sidebar')
				.on(
						'click',
						'li > a',
						function(e) {
							if ($(this).next().hasClass('sub-menu') == false) {
								if ($('.btn-navbar').hasClass('collapsed') == false) {
									$('.btn-navbar').click();
								}
                if(!$(this).hasClass('dont-block-ui')){
                  App.blockUI('.page-content');
                }
								return;
							}

							var parent = $(this).parent().parent();
							var the = $(this);

							parent.children('li.open').children('a').children(
									'.arrow').removeClass('open');
							parent.children('li.open').children('.sub-menu')
									.slideUp(200);
							parent.children('li.open').removeClass('open');

							var sub = jQuery(this).next();
							var slideOffeset = -200;
							var slideSpeed = 200;

							if (sub.is(":visible")) {
								jQuery('.arrow', jQuery(this)).removeClass(
										"open");
								jQuery(this).parent().removeClass("open");
								sub
										.slideUp(
												slideSpeed,
												function() {
													if ($('body')
															.hasClass(
																	'page-sidebar-fixed') == false
															&& $('body')
																	.hasClass(
																			'page-sidebar-closed') == false) {
														App.scrollTo(the,
																slideOffeset);
													}
													handleSidebarAndContentHeight();
												});
							} else {
								jQuery('.arrow', jQuery(this)).addClass("open");
								jQuery(this).parent().addClass("open");
								sub
										.slideDown(
												slideSpeed,
												function() {
													if ($('body')
															.hasClass(
																	'page-sidebar-fixed') == false
															&& $('body')
																	.hasClass(
																			'page-sidebar-closed') == false) {
														App.scrollTo(the,
																slideOffeset);
													}
													handleSidebarAndContentHeight();
												});
							}

							e.preventDefault();
						});

		// handle ajax links
		jQuery('.page-sidebar')
				.on(
						'click',
						' li > a.ajaxify',
						function(e) {
							e.preventDefault();
							App.scrollTop();

							var url = $(this).attr("href");
							var menuContainer = jQuery('.page-sidebar ul');
							var pageContent = $('.page-content');
							var pageContentBody = $('.page-content .page-content-body');

							menuContainer.children('li.active').removeClass(
									'active');
							menuContainer.children('arrow.open').removeClass(
									'open');

							$(this).parents('li').each(
									function() {
										$(this).addClass('active');
										$(this).children('a > span.arrow')
												.addClass('open');
									});
							$(this).parents('li').addClass('active');

							App.blockUI(pageContent, false);

							$
									.ajax({
										type : "GET",
										cache : false,
										url : url,
										dataType : "html",
										success : function(res) {
											App.unblockUI(pageContent);
											pageContentBody.html(res);
											App.fixContentHeight(); // fix
											// content
											// height
											App.initUniform(); // initialize
											// uniform
											// elements
										},
										error : function(xhr, ajaxOptions,
												thrownError) {
											pageContentBody
													.html('<h4>Could not load the requested content.</h4>');
											App.unblockUI(pageContent);
										},
										async : false
									});
						});
	};

	var _calculateFixedSidebarViewportHeight = function() {
		var sidebarHeight = $(window).height() - $('.header').height() + 1;
		if ($('body').hasClass("page-footer-fixed")) {
			sidebarHeight = sidebarHeight - $('.footer').height();
		}

		return sidebarHeight;
	};

	var handleFixedSidebar = function() {
		var menu = $('.page-sidebar-menu');

		if (menu.parent('.slimScrollDiv').size() === 1) { // destroy existing
			// instance before
			// updating the
			// height
			menu.slimScroll({
				destroy : true
			});
			menu.removeAttr('style');
			$('.page-sidebar').removeAttr('style');
		}

		if ($('.page-sidebar-fixed').size() === 0) {
			handleSidebarAndContentHeight();
			return;
		}

		if ($(window).width() >= 980) {
			var sidebarHeight = _calculateFixedSidebarViewportHeight();

			menu.slimScroll({
				size : '7px',
				color : '#a1b2bd',
				opacity : .3,
				position : isRTL ? 'left'
						: ($('.page-sidebar-on-right').size() === 1 ? 'left'
								: 'right'),
				height : sidebarHeight,
				allowPageScroll : false,
				disableFadeOut : false
			});
			handleSidebarAndContentHeight();
		}
	};

	var handleFixedSidebarHoverable = function() {
		if ($('body').hasClass('page-sidebar-fixed') === false) {
			return;
		}

		$('.page-sidebar').off('mouseenter').on(
				'mouseenter',
				function() {
					var body = $('body');

					if ((body.hasClass('page-sidebar-closed') === false || body
							.hasClass('page-sidebar-fixed') === false)
							|| $(this).hasClass('page-sidebar-hovering')) {
						return;
					}

					body.removeClass('page-sidebar-closed').addClass(
							'page-sidebar-hover-on');
					$(this).addClass('page-sidebar-hovering');
					$(this).animate({
						width : sidebarWidth
					}, 400, '', function() {
						$(this).removeClass('page-sidebar-hovering');
					});
				});

		$('.page-sidebar')
				.off('mouseleave')
				.on(
						'mouseleave',
						function() {
							var body = $('body');

							if ((body.hasClass('page-sidebar-hover-on') === false || body
									.hasClass('page-sidebar-fixed') === false)
									|| $(this)
											.hasClass('page-sidebar-hovering')) {
								return;
							}

							$(this).addClass('page-sidebar-hovering');
							$(this)
									.animate(
											{
												width : sidebarCollapsedWidth
											},
											400,
											'',
											function() {
												$('body')
														.addClass(
																'page-sidebar-closed')
														.removeClass(
																'page-sidebar-hover-on');
												$(this)
														.removeClass(
																'page-sidebar-hovering');
											});
						});
	};

	var handleSidebarToggler = function() {
		// handle sidebar show/hide
		$('.page-sidebar').on(
				'click',
				'.sidebar-toggler',
				function(e) {
					var body = $('body');
					var sidebar = $('.page-sidebar');

					if ((body.hasClass("page-sidebar-hover-on") && body
							.hasClass('page-sidebar-fixed'))
							|| sidebar.hasClass('page-sidebar-hovering')) {
						body.removeClass('page-sidebar-hover-on');
						sidebar.css('width', '').hide().show();
						e.stopPropagation();
						runResponsiveHandlers();
						return;
					}

					$(".sidebar-search", sidebar).removeClass("open");

					if (body.hasClass("page-sidebar-closed")) {
						body.removeClass("page-sidebar-closed");
						if (body.hasClass('page-sidebar-fixed')) {
							sidebar.css('width', '');
						}
					} else {
						body.addClass("page-sidebar-closed");
					}
					runResponsiveHandlers();
				});

		// handle the search bar close
		$('.page-sidebar').on('click', '.sidebar-search .remove', function(e) {
			e.preventDefault();
			$('.sidebar-search').removeClass("open");
		});

		// handle the search query submit on enter press
		$('.page-sidebar').on('keypress', '.sidebar-search input', function(e) {
			if (e.which == 13) {
				window.location.href = "extra_search.html";
				return false; // <---- Add this line
			}
		});

		// handle the search submit
		$('.sidebar-search .submit').on('click', function(e) {
			e.preventDefault();

			if ($('body').hasClass("page-sidebar-closed")) {
				if ($('.sidebar-search').hasClass('open') == false) {
					if ($('.page-sidebar-fixed').size() === 1) {
						$('.page-sidebar .sidebar-toggler').click(); // trigger
						// sidebar
						// toggle
						// button
					}
					$('.sidebar-search').addClass("open");
				} else {
					window.location.href = "extra_search.html";
				}
			} else {
				window.location.href = "extra_search.html";
			}
		});
	};

	var handleHorizontalMenu = function() {
		// handle hor menu search form toggler click
		$('.header').on('click', '.hor-menu .hor-menu-search-form-toggler',
				function(e) {
					if ($(this).hasClass('hide')) {
						$(this).removeClass('hide');
						$('.header .hor-menu .search-form').hide();
					} else {
						$(this).addClass('hide');
						$('.header .hor-menu .search-form').show();
					}
					e.preventDefault();
				});

		// handle hor menu search button click
		$('.header').on('click', '.hor-menu .search-form .btn', function(e) {
			window.location.href = "extra_search.html";
			e.preventDefault();
		});

		// handle hor menu search form on enter press
		$('.header').on('keypress', '.hor-menu .search-form input',
				function(e) {
					if (e.which == 13) {
						window.location.href = "extra_search.html";
						return false;
					}
				});
	};

	var handleGoTop = function() {
		/* set variables locally for increased performance */
		jQuery('.footer').on('click', '.go-top', function(e) {
			App.scrollTo();
			e.preventDefault();
		});
	};

	var handlePortletTools = function() {
		jQuery('body').on('click',
				'.portlet > .portlet-title > .tools > a.remove', function(e) {
					e.preventDefault();
					jQuery(this).closest(".portlet").remove();
				});

		jQuery('body').on(
				'click',
				'.portlet > .portlet-title > .tools > a.reload',
				function(e) {
					e.preventDefault();
					var el = jQuery(this).closest(".portlet").children(
							".portlet-body");
					App.blockUI(el);
					window.setTimeout(function() {
						App.unblockUI(el);
					}, 1000);
				});

		jQuery('body')
				.on(
						'click',
						'.portlet > .portlet-title > .tools > .collapse, .portlet .portlet-title > .tools > .expand',
						function(e) {
							e.preventDefault();
							var el = jQuery(this).closest(".portlet").children(
									".portlet-body");
							if (jQuery(this).hasClass("collapse")) {
								jQuery(this).removeClass("collapse").addClass(
										"expand");
								el.slideUp(200);
							} else {
								jQuery(this).removeClass("expand").addClass(
										"collapse");
								el.slideDown(200);
							}
						});
	};

	var handleUniform = function() {
		if (!jQuery().uniform) {
			return;
		}
		var test = $("input[type=checkbox]:not(.toggle), input[type=radio]:not(.toggle, .star, .required)");
		if (test.size() > 0) {
			test.each(function() {
				if ($(this).parents(".checker").size() == 0) {
					$(this).show();
					$(this).uniform();
				}
			});
		}
	};

	var handleAccordions = function() {
		$(".accordion").collapse().height('auto');
		var lastClicked;
		// add scrollable class name if you need scrollable panes
		jQuery('body').on('click', '.accordion.scrollable .accordion-toggle',
				function() {
					lastClicked = jQuery(this);
				}); // move to faq section

		jQuery('body').on('shown', '.accordion.scrollable', function() {
			jQuery('html,body').animate({
				scrollTop : lastClicked.offset().top - 150
			}, 'slow');
		});
	};

	var handleTabs = function() {

		// function to fix left/right tab contents
		var fixTabHeight = function(tab) {
			$(tab).each(function() {
				var content = $($($(this).attr("href")));
				var tab = $(this).parent().parent();
				if (tab.height() > content.height()) {
					content.css('min-height', tab.height());
				}
			});
		};

		// fix tab content on tab shown
		$('body')
				.on(
						'shown',
						'.nav.nav-tabs.tabs-left a[data-toggle="tab"], .nav.nav-tabs.tabs-right a[data-toggle="tab"]',
						function() {
							fixTabHeight($(this));
						});

		$('body').on('shown', '.nav.nav-tabs', function() {
			handleSidebarAndContentHeight();
		});

		// fix tab contents for left/right tabs
		fixTabHeight('.nav.nav-tabs.tabs-left > li.active > a[data-toggle="tab"], .nav.nav-tabs.tabs-right > li.active > a[data-toggle="tab"]');

		// activate tab if tab id provided in the URL
		if (location.hash) {
			var tabid = location.hash.substr(1);
			$('a[href="#' + tabid + '"]').click();
		}
	};

	var handleScrollers = function() {
		$('.scroller')
				.each(
						function() {
							var height;
							if ($(this).attr("data-height")) {
								height = $(this).attr("data-height");
							} else {
								height = $(this).css('height');
							}
							$(this)
									.slimScroll(
											{
												size : '7px',
												color : '#a1b2bd',
												position : isRTL ? 'left'
														: 'right',
												height : height,
												alwaysVisible : ($(this).attr(
														"data-always-visible") == "1" ? true
														: false),
												railVisible : ($(this).attr(
														"data-rail-visible") == "1" ? true
														: false),
												disableFadeOut : true
											});
						});
	};

	var handleTooltips = function() {
		if (App.isTouchDevice()) { // if touch device, some tooltips can be
			// skipped in order to not conflict with
			// click events
			jQuery('.tooltips:not(.no-tooltip-on-touch-device)').tooltip();
		} else {
			jQuery('.tooltips').tooltip();
		}
	};

	var handleDropdowns = function() {
		$('body').on('click', '.dropdown-menu.hold-on-click', function(e) {
			e.stopPropagation();
		});
	};

	var handleModal = function() {
		// this function adds .modal-open class to body element for select2 and
		// chosen dropdown hacks
		if (jQuery().modalmanager) {
			return; // skip if Extended Modal plugin is used
		}

		$('body').on('shown', '.modal', function(e) {
			$('body').addClass('modal-open');
		});

		$('body').on('hidden', '.modal', function(e) {
			if ($('.modal').size() === 0) {
				$('body').removeClass('modal-open');
			}
		});
	};

	var handlePopovers = function() {

    $(document).on('click', function (e) {
      $('.popovers').each(function () {
        //the 'is' for buttons that trigger popups
        //the 'has' for icons within a button that triggers a popup
        if (!$(this).is(e.target) && $(this).has(e.target).length === 0 && $('.popover').has(e.target).length === 0) {
          $(this).popover('hide');
        }
      });
    });
  };

  var handleChoosenSelect = function() {
    if (!jQuery().chosen) {
      return;
    }

    $(".chosen").each(
      function() {
      $(this).chosen(
        {
        allow_single_deselect : $(this).attr(
          "data-with-deselect") == "1" ? true
          : false
      });
    });
  };

  var handleFancybox = function() {
    if (!jQuery.fancybox) {
      return;
    }
    ;

    if (jQuery(".fancybox-button").size() > 0) {
      jQuery(".fancybox-button").fancybox({
        groupAttr : 'data-rel',
        prevEffect : 'none',
        nextEffect : 'none',
        closeBtn : true,
        helpers : {
          title : {
            type : 'inside'
          }
        }
      });
    }
  };

  var handleTheme = function() {

    var panel = $('.color-panel');

    if ($('body').hasClass('page-boxed') == false) {
      $('.layout-option', panel).val("fluid");
    }

    $('.sidebar-option', panel).val("default");
    $('.header-option', panel).val("fixed");
    $('.footer-option', panel).val("default");

    // handle theme layout
    var resetLayout = function() {
      $("body").removeClass("page-boxed")
      .removeClass("page-footer-fixed").removeClass(
        "page-sidebar-fixed").removeClass(
        "page-header-fixed");

        $('.header > .navbar-inner > .container').removeClass("container")
        .addClass("container-fluid");

        if ($('.page-container').parent(".container").size() === 1) {
          $('.page-container').insertAfter('.header');
        }

        if ($('.footer > .container').size() === 1) {
          $('.footer').html($('.footer > .container').html());
        } else if ($('.footer').parent(".container").size() === 1) {
          $('.footer').insertAfter('.page-container');
        }

        $('body > .container').remove();
    };

    var lastSelectedLayout = '';

    var setLayout = function() {

      var layoutOption = $('.layout-option', panel).val();
      var sidebarOption = $('.sidebar-option', panel).val();
      var headerOption = $('.header-option', panel).val();
      var footerOption = $('.footer-option', panel).val();

      if (sidebarOption == "fixed" && headerOption == "default") {
        alert('Default Header with Fixed Sidebar option is not supported. Proceed with Default Header with Default Sidebar.');
        $('.sidebar-option', panel).val("default");
        sidebarOption = 'default';
      }

      resetLayout(); // reset layout to default state

      if (layoutOption === "boxed") {
        $("body").addClass("page-boxed");

        // set header
        $('.header > .navbar-inner > .container-fluid').removeClass(
          "container-fluid").addClass("container");
          var cont = $('.header').after('<div class="container"></div>');

          // set content
          $('.page-container').appendTo('body > .container');

          // set footer
          if (footerOption === 'fixed' || sidebarOption === 'default') {
            $('.footer').html(
              '<div class="container">' + $('.footer').html()
              + '</div>');
          } else {
            $('.footer').appendTo('body > .container');
          }
      }

      if (lastSelectedLayout != layoutOption) {
        // layout changed, run responsive handler:
        runResponsiveHandlers();
      }
      lastSelectedLayout = layoutOption;

      // header
      if (headerOption === 'fixed') {
        $("body").addClass("page-header-fixed");
        $(".header").removeClass("navbar-static-top").addClass(
          "navbar-fixed-top");
      } else {
        $("body").removeClass("page-header-fixed");
        $(".header").removeClass("navbar-fixed-top").addClass(
          "navbar-static-top");
      }

      // sidebar
      if (sidebarOption === 'fixed') {
        $("body").addClass("page-sidebar-fixed");
      } else {
        $("body").removeClass("page-sidebar-fixed");
      }

      // footer
      if (footerOption === 'fixed') {
        $("body").addClass("page-footer-fixed");
      } else {
        $("body").removeClass("page-footer-fixed");
      }

      handleSidebarAndContentHeight(); // fix content height
      handleFixedSidebar(); // reinitialize fixed sidebar
      handleFixedSidebarHoverable(); // reinitialize fixed sidebar hover
      // effect
    };

    // handle theme colors
    var setColor = function(color) {
      $('#style_color').attr("href",
                             "assets/css/themes/" + color + ".css");
                             $.cookie('style_color', color);
    };

    $('.icon-color', panel).click(function() {
      $('.color-mode').show();
      $('.icon-color-close').show();
    });

    $('.icon-color-close', panel).click(function() {
      $('.color-mode').hide();
      $('.icon-color-close').hide();
    });

    $('li', panel).click(function() {
      var color = $(this).attr("data-style");
      setColor(color);
      $('.inline li', panel).removeClass("current");
      $(this).addClass("current");
    });

    $('.layout-option, .header-option, .sidebar-option, .footer-option',
      panel).change(setLayout);
  };

  var handleFixInputPlaceholderForIE = function() {
    // fix html5 placeholder attribute for ie7 & ie8
    if (isIE8 || isIE9) { // ie7&ie8
      // this is html5 placeholder fix for inputs, inputs with
      // placeholder-no-fix class will be skipped(e.g: we need this for
      // password fields)
      jQuery(
        'input[placeholder]:not(.placeholder-no-fix), textarea[placeholder]:not(.placeholder-no-fix)')
        .each(
          function() {

          var input = jQuery(this);

          if (input.val() == ''
              && input.attr("placeholder") != '') {
                input.addClass("placeholder").val(
                  input.attr('placeholder'));
              }

              input.focus(function() {
                if (input.val() == input
                    .attr('placeholder')) {
                      input.val('');
                    }
              });

              input.blur(function() {
                if (input.val() == ''
                    || input.val() == input
                  .attr('placeholder')) {
                    input.val(input.attr('placeholder'));
                  }
              });
        });
    }
  };

  var handleFullScreenMode = function() {
    // mozfullscreenerror event handler

    // toggle full screen
    function toggleFullScreen() {
      if (!document.fullscreenElement && // alternative standard method
          !document.mozFullScreenElement && !document.webkitFullscreenElement) { // current
        // working
        // methods
        if (document.documentElement.requestFullscreen) {
          document.documentElement.requestFullscreen();
        } else if (document.documentElement.mozRequestFullScreen) {
          document.documentElement.mozRequestFullScreen();
        } else if (document.documentElement.webkitRequestFullscreen) {
          document.documentElement
          .webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
        }
      } else {
        if (document.cancelFullScreen) {
          document.cancelFullScreen();
        } else if (document.mozCancelFullScreen) {
          document.mozCancelFullScreen();
        } else if (document.webkitCancelFullScreen) {
          document.webkitCancelFullScreen();
        }
      }
    }

    $('#trigger_fullscreen').click(function() {
      toggleFullScreen();
    });
  };

  var handleEditables = function(){
    $.fn.editable.defaults.inputclass = 'm-wrap';
    $.fn.editableform.buttons = '<button type="submit" class="btn blue editable-submit"><i class="icon-ok"></i></button>';
    $.fn.editableform.buttons += '<button type="button" class="btn editable-cancel"><i class="icon-remove"></i></button>';
  }

  var handleTimePickers = function () {

    if (jQuery().timepicker) {
      $('.timepicker-24').timepicker({
        minuteStep: 5,
        showMeridian: false,
        defaultTime: '00:00',
        disableFocus: true
      });
    }
  }

  var handleDatePickers = function () {

    if (jQuery().datepicker) {
      $('.date-picker').datepicker({
        rtl : App.isRTL(),
        format: "dd/mm/yyyy"
      });
    }
  }

  var handleBackButton = function() {
    $('.back-btn').on('click', function(){
      history.back();
    });
  }

  var handleSimpleColorPicker = function () {
    $('select.color-picker').simplecolorpicker({picker: true, theme: 'fontawesome', pickerDelay: 700});
  }

  var getAjaxDefaultOptions = function() {
    return {
      elementToBlock : $('.page-content'),
      reloadUniform : false,
      reloadTimepicker : false,
      reloadDatepicker: false,
      reloadColorpicker: false,
      fixContentHeight : false,
      successMessage : undefined,
      errorMessage : 'Ooopss... Ocorreu um erro ao tentar realizar a operação!',
      completeMessage : undefined,
      blockUI : true,
      ajaxBeforeSend : function(xhr, settings) {
      },
      ajaxSuccess : function(data, status, xhr) {
      },
      ajaxError : function(xhr, status, error) {
      },
      ajaxComplete : function(xhr, status) {
      }
    };
  };

  // Handle ajax requests callbacks, either using rails UJS or direct ajax
  // requests via jQuery
  var ajaxCallbacks = function(options) {
    return {
      beforeSend : function(xhr, settings) {
        if (options.blockUI) {
          App.blockUI(options.elementToBlock);
        }
        options.ajaxBeforeSend(xhr, settings);
      },

      success : function(evt, data, status, xhr) {
        options.ajaxSuccess(evt, data, status, xhr);
      },

      error : function(xhr, status, error) {
        options.ajaxError(xhr, status, error);
      },

      complete : function(xhr, status) {

        options.ajaxComplete(xhr, status);
        if (options.fixContentHeight) {
          App.fixContentHeight();
        }
        if (options.reloadUniform) {
          App.initUniform();
        }
        if (options.blockUI) {
          App.unblockUI(options.elementToBlock);
        }
        if(options.reloadTimepicker) {
          handleTimePickers();
        }
        if(options.reloadDatepicker) {
          handleDatePickers();
        }
        if(options.reloadColorpicker) {
          handleSimpleColorPicker();
        }
      }
    };
  };

  var ajax = function(type, url, ajaxData, options) {
    var defaults = getAjaxDefaultOptions();

    options = $.extend({}, defaults, options);

    $.ajax({
      type : type,
      url : url,
      data : ajaxData,
      beforeSend : function(xhr, settings) {
        ajaxCallbacks(options).beforeSend(xhr, settings);
      },

      success : function(evt, data, status, xhr) {
        ajaxCallbacks(options).success(evt, data, status, xhr);
      },

      error : function(xhr, status, error) {
        ajaxCallbacks(options).error(xhr, status, error);
      },

      complete : function(xhr, status) {
        ajaxCallbacks(options).complete(xhr, status);
      }

    });
  };

  // Handle Ajax requests made using rails UJS
  var ajaxRailsUJS = function(elem, options) {
    var defaults = getAjaxDefaultOptions();

    options = $.extend({}, defaults, options);

    $(elem).on('ajax:beforeSend', function(xhr, settings) {
      ajaxCallbacks(options).beforeSend(xhr, settings);
    });

    $(elem).on('ajax:success', function(data, status, xhr) {
      ajaxCallbacks(options).success(data, status, xhr);
    });

    $(elem).on('ajax:error', function(xhr, status, error) {
      ajaxCallbacks(options).error(xhr, status, error);
    });

    $(elem).on('ajax:complete', function(xhr, status) {
      ajaxCallbacks(options).complete(xhr, status);
    });
  };

  var handleCustomFormValidationMethods = function(){
    jQuery.validator.addMethod("greaterThan",
                               function(value, element, otherElementName) {
                                 first = moment(value, 'DD/MM/YYYY');
                                 second = moment($('[name="' + otherElementName + '"]').val(), 'DD/MM/YYYY');
                                 if(!first.isValid() || !second.isValid()){
                                   return true; //Valid since we don't have valid dates to compare
                                 }

                                 return first > second;
                               });
    jQuery.validator.addMethod("greaterThanToday",
                               function(value, element) {
                                 elementDate = moment(value, 'DD/MM/YYYY');
                                 todayDate = moment().startOf('day');
                                 if(!elementDate.isValid()){
                                   return true; //Valid since we don't have valid dates to compare
                                 }

                                 return elementDate >= todayDate;
                               });
  };

  // * END:CORE HANDLERS *//

    return {

      // main function to initiate template pages
      init : function() {

        // IMPORTANT!!!: Do not modify the core handlers call order.

        // core handlers
        handleInit();
        handleResponsiveOnResize(); // set and handle responsive
        handleUniform();
        handleScrollers(); // handles slim scrolling contents
        handleResponsiveOnInit(); // handler responsive elements on page
        // load

        // layout handlers
        handleFixedSidebar(); // handles fixed sidebar menu
        handleFixedSidebarHoverable(); // handles fixed sidebar on hover
        // effect
        handleSidebarMenu(); // handles main menu
        handleHorizontalMenu(); // handles horizontal menu
        handleSidebarToggler(); // handles sidebar hide/show
        handleFixInputPlaceholderForIE(); // fixes/enables html5
        // placeholder attribute for
        // IE9, IE8
        handleGoTop(); // handles scroll to top functionality in the footer
        handleTheme(); // handles style customer tool

        // ui component handlers
        handlePortletTools(); // handles portlet action bar
        // functionality(refresh, configure, toggle,
        // remove)
        handleDropdowns(); // handle dropdowns
        handleTabs(); // handle tabs
        handleTooltips(); // handle bootstrap tooltips
        handlePopovers(); // handles bootstrap popovers
        handleAccordions(); // handles accordions
        handleChoosenSelect(); // handles bootstrap chosen dropdowns
        handleModal();

        App.addResponsiveHandler(handleChoosenSelect); // reinitiate chosen
        // dropdown on main
        // content resize.
        // disable this line
        // if you don't
        // really use chosen
        // dropdowns.
        handleFullScreenMode(); // handles full screen

        handleTimePickers();
        handleDatePickers();
        handleSimpleColorPicker();

        handleEditables();

        handleBackButton();

        handleCustomFormValidationMethods();
        moment.locale('pt-br'); //setting brazilian locale
      },


      fixContentHeight : function() {
        handleSidebarAndContentHeight();
      },

      addResponsiveHandler : function(func) {
        responsiveHandlers.push(func);
      },

      // useful function to make equal height for contacts stand side by side
      setEqualHeight : function(els) {
        var tallestEl = 0;
        els = jQuery(els);
        els.each(function() {
          var currentHeight = $(this).height();
          if (currentHeight > tallestEl) {
            tallestColumn = currentHeight;
          }
        });
        els.height(tallestEl);
      },

      // wrapper function to scroll to an element
      scrollTo : function(el, offeset) {
        pos = el ? el.offset().top : 0;
        jQuery('html,body').animate({
          scrollTop : pos + (offeset ? offeset : 0)
        }, 'slow');
      },

      scrollTop : function() {
        App.scrollTo();
      },

      // wrapper function to block element(indicate loading)
      blockUI : function(el, centerY) {
        var el = jQuery(el);
        el.block({
          message : '<img src="/assets/ajax-loading.gif">',
          centerY : centerY != undefined ? centerY : true,
          css : {
            top : '10%',
            border : 'none',
            padding : '2px',
            backgroundColor : 'none',
            'z-index': '99999'
          },
          overlayCSS : {
            backgroundColor : '#000',
            opacity : 0.05,
            cursor : 'wait'
          }
        });
      },

      // wrapper function to un-block element(finish loading)
      unblockUI : function(el) {
        jQuery(el).unblock({
          onUnblock : function() {
            //jQuery(el).removeAttr("style");
          }
        });
      },

      // initializes uniform elements
      initUniform : function(els) {

        if (els) {
          jQuery(els).each(function() {
            if ($(this).parents(".checker").size() == 0) {
              $(this).show();
              $(this).uniform();
            }
          });
        } else {
          handleUniform();
        }

      },

      updateUniform : function(els) {
        $.uniform.update(els);
      },

      // initializes choosen dropdowns
      initChosenSelect : function(els) {
        $(els).chosen({
          allow_single_deselect : true
        });
      },

      initFancybox : function() {
        handleFancybox();
      },

      getActualVal : function(el) {
        var el = jQuery(el);
        if (el.val() === el.attr("placeholder")) {
          return "";
        }

        return el.val();
      },

      getURLParameter : function(paramName) {
        var searchString = window.location.search.substring(1), i, val, params = searchString
        .split("&");

        for (i = 0; i < params.length; i++) {
          val = params[i].split("=");
          if (val[0] == paramName) {
            return unescape(val[1]);
          }
        }
        return null;
      },

      // check for device touch support
      isTouchDevice : function() {
        try {
          document.createEvent("TouchEvent");
          return true;
        } catch (e) {
          return false;
        }
      },

      isIE8 : function() {
        return isIE8;
      },

      isRTL : function() {
        return isRTL;
      },

      getLayoutColorCode : function(name) {
        if (layoutColorCodes[name]) {
          return layoutColorCodes[name];
        } else {
          return '';
        }
      },

      ajax : function(type, url, ajaxData, options) {
        ajax(type, url, ajaxData, options);
      },

      ajaxRailsUJS : function(elem, options) {
        ajaxRailsUJS(elem, options);
      },

      initDatePickers: function() {
        handleTimePickers();
      },
      initTimePickers: function() {
        handleDatePickers();
      },

      initDatatablesBootstrapIntegration : function() {
        /* Set the defaults for DataTables initialisation */
        $.extend(true, $.fn.dataTable.defaults, {
          "sDom": "<'row-fluid'<'span6'l><'span6'Tf>r>t<'row-fluid'<'span6'i><'span6'p>>",
          "sPaginationType" : "bootstrap",
          "iDisplayLength": 20,
          "oLanguage": {
            "sEmptyTable": "Nenhum registro encontrado",
            "sInfo": "Mostrando de _START_ até _END_ de _TOTAL_ registros",
            "sInfoEmpty": "Mostrando 0 até 0 de 0 registros",
            "sInfoFiltered": "(Filtrados de _MAX_ registros)",
            "sInfoPostFix": "",
            "sInfoThousands": ".",
            "sLengthMenu": "_MENU_ resultados por página",
            "sLoadingRecords": "Carregando...",
            "sProcessing": "Processando...",
            "sZeroRecords": "Nenhum registro encontrado",
            "sSearch": "Pesquisar",
            "oPaginate": {
              "sNext": "Próximo",
              "sPrevious": "Anterior",
              "sFirst": "Primeiro",
              "sLast": "Último"
            },
            "oAria": {
              "sSortAscending": ": Ordenar colunas de forma ascendente",
              "sSortDescending": ": Ordenar colunas de forma descendente"
            }
          }
        });

        /*
         * TableTools Bootstrap compatibility Required TableTools 2.1+
         */
        if ($.fn.DataTable.TableTools) {
          TableTools.DEFAULTS = {
            "sSwfPath": "<%= asset_path("dataTables/extras/swf/copy_csv_xls_pdf.swf") %>",
            "aButtons": [{
              "sExtends":    "collection",
              "sButtonText": 'Exportar <span class="caret" />',
              "aButtons":    [ "csv", "xls", "pdf" ]
            }],
            "oTags": {
              "container": "div",
              "button": "a", // We really want to use buttons here, but Firefox and IE ignore the
              // click on the Flash element in the button (but not mouse[in|out]).
              "liner": "span",
              "collection" : {
                "container" : "ul",
                "button" : "li",
                "liner" : "a"
              }
            }
          }; 

          // Set the classes that TableTools uses to something suitable
          // for Bootstrap
          $.extend(true, $.fn.DataTable.TableTools.classes, {
            "container" : "DTTT btn-group",
            "buttons" : {
              "normal" : "btn",
              "disabled" : "disabled"
            },
            "collection" : {
              "container" : "DTTT_dropdown dropdown-menu",
              "buttons" : {
                "normal" : "",
                "disabled" : "disabled"
              }
            },
            "print" : {
              "info" : "DTTT_print_info modal"
            },
            "select" : {
              "row" : "active"
            }
          });

        }
      }

    };

}();
